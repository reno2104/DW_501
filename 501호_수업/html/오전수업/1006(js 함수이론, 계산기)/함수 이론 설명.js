/*
★ 함수 : 코드를 모듈화 한것으로 재사용성, 유지보수 효율성이 좋아지는 특징을 가짐.
-> 모듈에는 이름을 지정해야 하며, 모듈 삽입하게 되는 사항과 모듈이 되었을 때 출력
되는 사항을 확인 하는 것이 필요함.

하나의 함수로 만들어 관리하는 것보다, 여러개로 나눠서 만드는 것이
효율성과 관리성 측면에서 더 좋다.

● 함수의 구성 : 선언부, 정의부, 실행부
-> 함수모듈의 출력형태와 이름, 삽입되는 사항과 코드블럭이 추가되어 있는 부분.

<<
＃ 선언부 : 
ex) function func1(odj1, obj2){ //정의부
    res = obj1 + obj2;
    return res;
}

addEventListner("click", function(){{ // 실행부

}})

＃ 실행부 : 함수의 이름과 데이터를 삽입하여 함수모듈을 실행하게 해주는 부분.
ex) func1(10,20);
>>

● 함수 실행순서
브라우저 실행 -> html 앨리먼트 호출 -> 코드해석 -> 함수발견 -> 함수실행 -> 실행완료 후 호출한 위치로 복귀
-> 원래 코드 실행

※ 변수의 존속성
변수의 지역성 : 변수는 기본적으로 코드블럭 내에서만 존재.
(코드블럭 - {})
변수 선언후 코드블럭이 종료될 때까지 메모리상에 존재(지역변수).
코드블럭 내에서 선언된 변수는 모두 지역변수이다.
함수 실행시 현재까지 실행되던 내역은 모두 스택이라는 메모리영역에
보관후 실행함수로 제어를 이동하여 초기화 -> 함수 실행이 완료되면
초기화된 변수들은 메모리 영역에서 삭제.

◎ 지역변수는 코드블럭에서만 사용가능.
코드블럭 실행시 생성되고 코드블럭 종료시 삭제

◎ 변수의 전역성 : 코드블럭 외부에서 선언된 변수.
모든 코드블럭에서 사용 가능. 전역변수는 프로그램 종료시 삭제.

＊＊ 코드가 복잡해질 우려가 있으므로 전역변수는 많이 만들지 않는다.
일반적으로 지역변수를 많이 사용한다.

● 함수, 메소드 차이 : 귀속여부.
함수는 독립적. 메소드는 귀속되어 사용되는 코드.
함수는 내가 원할 때마다 실행가능.
*/

/*
● 함수의 사용 예

a input 태그로부터 데이터 입력받아서 
1. 데이터가 유효한 데이터인지 검사하고 저장하는 위치에 공간확보가 되었는지 확인하고 파일 저장 하기위해
2. 파일이 생성되었는지 확인하고 생성되었다면 
3. 파일에 저장한다.

b input 태그로부터 데이터 입력받는 경우
(함수가 없을 때) a input 태그 처럼 또다시 만들어야 함.
(함수 있을 때) 1. 2. 3. 실행만 하면 됨.
*/ 


/*
● 함수간 통신방법(데이터 이동)
함수는 기본적으로 폐쇄적 구조 형태 -> 함수간 데이터 공유 불가
함수간 통신을 위한 방법 : 데이터 삽입부와 출력부를 이용해서 통신.
데이터삽입 ( 인수(파라미터, 매개변수)) 실행함수에 데이터 전달
sum(10, 20);
-> 10과 20 데이터를 매개변수 a와 b에 전달 // a,b 를 연결해주는 매개체.
a=10, b=20 저장.

* 매개변수 갯수에 따라 입력값도 같은 값을 설정해주어야 한다.
* 예시)
function sum(a,b){ 
}

● 반환값 : 실행 함수에서 호출함수로 전달하는 데이터

function sum(a,b){
    return (a+b);
}
result = sum(23,12);

=> 변수 result는 35의 값을 가지게 된다.
*/
res = total(5, 20); //원하는 숫자 범위의 총 합 구하기
document.write(res + '<br>');
function total(a,b){
    var sum =0;
    for(var i=5; i<=20; i++){
        sum = sum+i;
    }
    return sum;
}


//★ 함수의 4가지 형태

// 1. 입력 x , 출력 x
function func1(){
    document.write("매개변수도 없고 반환도 없다.");
}

// 2. 입력 o , 출력 x => 데이터를 가공해야 한다.
function func2(birth){
    var age = 2022 - parseInt(birth.substring(0,4));
    document.write('나이는'+age+'살 먹었다.'); 
}

// 3. 입력 x, 출력 o (매개변수는 없고 리턴값만 존재하는 경우.)
function func3(){
    var num = document.querySelector('#number');
    num = parseInt(num);

    return num + "번 입니다.";
}

// 4. 입력 o, 출력 o 
function func4(point, multi, state){
    if(state > 0) multi = 1;

        return(point * multi);
}

